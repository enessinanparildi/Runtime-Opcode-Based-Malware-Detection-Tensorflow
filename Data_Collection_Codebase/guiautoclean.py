import pywinauto
from pywinauto.application import Application
import pywinauto.timings
import time
import numpy as np
import os
import pywinauto.base_wrapper


def command_batch(dialog, cmd):
    dialog.wait('enabled').type_keys('%{F1}')
    dialog.wait('enabled').type_keys(cmd)
    dialog.wait('enabled').type_keys('%{F1}')
    dialog.wait('enabled').type_keys('{ENTER}')


def error_handle(app):
    while app.windows()[0]._element_info.name == 'Entry Point Alert':
        app[app.windows()[0]._element_info.name].wait('exists').type_keys('{ENTER}')
        break

    while app.windows()[0]._element_info.name == 'Not a valid PE file':
        print('pass')
        app[app.windows()[0]._element_info.name].wait('exists').type_keys('{ENTER}')
        # dialog = app['Immunity Debugger']
        # dialog.wait('enabled').type_keys('%{F2}')
        time_waiting_tracing = 1
        time_waiting_loading = 1
        flag_written = False
        break

    while app.windows()[0]._element_info.name == 'Compressed code?':
        app[app.windows()[0]._element_info.name].wait('exists').type_keys('{VK_TAB}')
        app[app.windows()[0]._element_info.name].wait('exists').type_keys('{ENTER}')
        # dialog = app['Immunity Debugger']
        # dialog.wait('enabled').type_keys('%{F2}')
        break

    while any([app._element_info.name == 'Error' for app in app.windows()]):
        for index, apps in enumerate(app.windows()):
            if apps._element_info.name == 'Error':
                target_index = index
                app.windows()[target_index].type_keys('{ENTER}')
        print('pass')
        dialog = app['Immunity Debugger']
        dialog.wait('exists').type_keys('%{F2}')
        time_waiting_tracing = 1
        time_waiting_loading = 1
        flag_written = False
        break
    while app.windows()[0]._element_info.name == 'Suspicious breakpoint':
        app[app.windows()[0]._element_info.name].wait('exists').type_keys('{VK_TAB}')
        app[app.windows()[0]._element_info.name].wait('exists').type_keys('{ENTER}')
        # dialog = app['Immunity Debugger']
        # dialog = app['Immunity Debugger']
        # dialog.wait('enabled').type_keys('%{F2}')

    while app.windows()[0]._element_info.name == 'Entry Point Alert':
        app[app.windows()[0]._element_info.name].wait('exists').type_keys('{ENTER}')
        break

    while any([app._element_info.name == 'Entry Point Alert' for app in app.windows()]):
        for index, apps in enumerate(app.windows()):
            if apps._element_info.name == 'Entry Point Alert':
                target_index = index
                app[app.windows()[target_index]._element_info.name].wait('exists').type_keys('{ENTER}')
        break


def main_function_exe():
    filteredpath = 'E:\\final_exe_text_lists\\dirs_first_exe_32_bit.txt'

    indexpath = 'D:\\bigproject_repository\\indexpath2.npy'

    writtenpaths = 'D:\\bigproject_repository\\writtenpathlist.txt'
    wholewrittenpaths = 'D:\\bigproject_repository\\wholewrittenpathlist.txt'

    path = r'C:\\Program Files (x86)\\Immunity Inc\\Immunity Debugger\\ImmunityDebugger.exe'
    app = Application(backend="win32").connect(path=path)
    #
    starting_value = np.load(indexpath)[0]
    generator = [line for line in open(filteredpath, 'r')]
    commandrun = 'TC'
    commandprefix = 'OPEN{VK_SPACE}'
    file_index = starting_value
    for line in generator[starting_value:]:
        file = open(writtenpaths, 'a')
        file2 = open(wholewrittenpaths, 'a')

        flag_written = True

        time_waiting_tracing = 60
        time_waiting_loading = 25
        time_waiting_process_loading = 5

        rawpath = line

        np.save(indexpath, np.array([file_index]))
        print('Processing_file_number = ' + str(file_index))
        file_index = file_index + 1

        command = commandprefix + rawpath[0:-1]
        print(command)
        dialog = app[app.windows()[0]._element_info.name]

        dialog.wait('exists').type_keys('%{F1}')
        dialog.wait('exists').type_keys(command, with_spaces=True)
        dialog.wait('exists').type_keys('%{F1}')
        dialog.wait('exists').type_keys('{ENTER}')

        time.sleep(time_waiting_process_loading)

        while app.windows()[0]._element_info.name == 'Entry Point Alert':
            app[app.windows()[0]._element_info.name].wait('exists').type_keys('{ENTER}')
            break

        while app.windows()[0]._element_info.name == 'Not a valid PE file':
            print('pass')
            app[app.windows()[0]._element_info.name].wait('exists').type_keys('{ENTER}')
            # dialog = app['Immunity Debugger']
            # dialog.wait('enabled').type_keys('%{F2}')
            time_waiting_tracing = 1
            time_waiting_loading = 1
            flag_written = False
            break

        while app.windows()[0]._element_info.name == 'Compressed code?':
            app[app.windows()[0]._element_info.name].wait('exists').type_keys('{VK_TAB}')
            app[app.windows()[0]._element_info.name].wait('exists').type_keys('{ENTER}')
            # dialog = app['Immunity Debugger']
            # dialog.wait('enabled').type_keys('%{F2}')
            break

        while any([app._element_info.name == 'Error' for app in app.windows()]):
            for index, apps in enumerate(app.windows()):
                if apps._element_info.name == 'Error':
                    target_index = index
                    app[app.windows()[target_index]._element_info.name].wait('exists').type_keys('{ENTER}')
            print('pass')
            dialog = app['Immunity Debugger']
            dialog.wait('exists').type_keys('%{F2}')
            time_waiting_tracing = 1
            time_waiting_loading = 1
            flag_written = False
            break

        dialog = app[app.windows()[0]._element_info.name]
        time.sleep(2)

        while app.windows()[0]._element_info.name == 'Entry Point Alert':
            app[app.windows()[0]._element_info.name].wait('exists').type_keys('{ENTER}')
            break

        while any([app._element_info.name == 'Entry Point Alert' for app in app.windows()]):
            for index, apps in enumerate(app.windows()):
                if apps._element_info.name == 'Entry Point Alert':
                    target_index = index
                    app[app.windows()[target_index]._element_info.name].wait('exists').type_keys('{ENTER}')
            break

        # try:
        # except pywinauto.timings.TimeoutError:
        try:
            dialog = app[app.windows()[0]._element_info.name]
            dialog.wait('exists').type_keys('%{F1}')
        except:
            dialog = app[app.windows()[0]._element_info.name]
            error_handle(app)
            dialog = app[app.windows()[0]._element_info.name]
            dialog.wait('exists').type_keys('%{F1}')

        dialog.wait('exists').type_keys(commandrun)
        dialog.wait('exists').type_keys('%{F1}')
        dialog.wait('exists').type_keys('{ENTER}')
        time.sleep(time_waiting_loading)

        while any([apps._element_info.name == 'Error' for apps in app.windows()]):
            error_indices = []
            for index, apps in enumerate(app.windows()):
                if apps._element_info.name == 'Error':
                    error_indices.append(index)
            try:
                app.windows()[error_indices[0]].type_keys('{ENTER}')
            except:
                app.windows()[error_indices[1]].type_keys('{ENTER}')

            print('pass')
            dialog = app[app.windows()[0]._element_info.name]
            dialog.wait('exists').type_keys('%{F2}')
            time_waiting_tracing = 1
            flag_written = False
            break

        while app.windows()[0]._element_info.name == 'Compressed code?':
            app.windows()[0].type_keys('{VK_TAB}')
            app.windows()[0].type_keys('{ENTER}')
            break

        while app.windows()[0]._element_info.name == 'Entry Point Alert':
            app.windows()[0].type_keys('{ENTER}')
            break

        time.sleep(2)
        try:
            dialog = app[app.windows()[0]._element_info.name]
            dialog.wait('exists').type_keys('%{F1}')
        except:
            error_handle(app)

        dialog = app[app.windows()[0]._element_info.name]
        dialog.wait('exists').type_keys('%{F1}')
        dialog.wait('exists').type_keys(commandrun)
        dialog.wait('exists').type_keys('%{F1}')
        dialog.wait('exists').type_keys('{ENTER}')
        time.sleep(time_waiting_tracing)
        try:
            dialog = app[app.windows()[0]._element_info.name]
            dialog.wait('exists').type_keys('%{F2}')
        except:
            error_handle(app)
        try:
            dialog.wait('exists').type_keys('%{F2}')
        except:
            dialog = app[app.windows()[0]._element_info.name]
            error_handle(app)
            dialog.wait('exists').type_keys('%{F2}')

        file2.write("%s" % rawpath)
        file2.close()

        if flag_written:
            file.write("%s" % rawpath)
            file.close()


def trace_command(app, commandrun):
    dialog = app[app.windows()[0]._element_info.name]
    try:
        error_handle(app)
        dialog['Embedded Command Line'].edit.wait('exists').type_keys(commandrun)
        dialog['Embedded Command Line'].edit.wait('exists').type_keys('{ENTER}')
    except:
        dialog = app[app.windows()[0]._element_info.name]
        error_handle(app)
        dialog['OT_PLUGIN_0001'].edit.wait('exists').type_keys(commandrun)
        dialog['OT_PLUGIN_0001'].edit.wait('exists').type_keys('{ENTER}')


def close_command(app):
    dialog = app[app.windows()[0]._element_info.name]
    try:
        dialog.wait('exists').type_keys('%{F2}')
    except:
        error_handle(app)
        dialog.wait('exists').type_keys('%{F2}')


def main_function_exe_v2():
    filteredpath = 'E:\\final_exe_text_lists\\dirs_first_exe_32_bit.txt'

    indexpath = 'D:\\bigproject_repository\\indexpath2.npy'

    writtenpaths = 'D:\\bigproject_repository\\writtenpathlist.txt'
    wholewrittenpaths = 'D:\\bigproject_repository\\wholewrittenpathlist.txt'

    path = r'C:\\Program Files (x86)\\Immunity Inc\\Immunity Debugger\\ImmunityDebugger.exe'
    app = Application(backend="win32").connect(path=path)
    #
    starting_value = np.load(indexpath)[0]
    starting_value = 8605
    generator = [line for line in open(filteredpath, 'r')]
    commandrun = 'TC'
    commandprefix = 'OPEN{VK_SPACE}'
    file_index = starting_value
    for line in generator[starting_value:]:
        file = open(writtenpaths, 'a')
        file2 = open(wholewrittenpaths, 'a')

        flag_written = True

        time_waiting_tracing = 70
        time_waiting_loading = 45
        time_waiting_process_loading = 5

        rawpath = line

        np.save(indexpath, np.array([file_index]))
        print('Processing_file_number = ' + str(file_index))
        file_index = file_index + 1

        command = commandprefix + rawpath[0:-1]
        dialog = app['Immunity Debugger']
        print(command)
        print(app.windows()[0]._element_info.name)

        dialog['Embedded Command Line'].edit.wait('exists').type_keys(command, with_spaces=True)
        dialog['Embedded Command Line'].edit.wait('exists').type_keys('{ENTER}')

        time.sleep(time_waiting_process_loading)

        while app.windows()[0]._element_info.name == 'Entry Point Alert':
            app[app.windows()[0]._element_info.name].wait('exists').type_keys('{ENTER}')
            break

        while app.windows()[0]._element_info.name == 'Not a valid PE file':
            print('pass')
            app[app.windows()[0]._element_info.name].wait('exists').type_keys('{ENTER}')
            time_waiting_tracing = 1
            time_waiting_loading = 1
            flag_written = False
            break

        while app.windows()[0]._element_info.name == 'Compressed code?':
            app[app.windows()[0]._element_info.name].wait('exists').type_keys('{VK_TAB}')
            app[app.windows()[0]._element_info.name].wait('exists').type_keys('{ENTER}')
            break

        while any([app._element_info.name == 'Error' for app in app.windows()]):
            for index, apps in enumerate(app.windows()):
                if apps._element_info.name == 'Error':
                    target_index = index
                    app[app.windows()[target_index]._element_info.name].wait('exists').type_keys('{ENTER}')
            print('pass')
            dialog = app['Immunity Debugger']
            dialog.wait('exists').type_keys('%{F2}')
            time_waiting_tracing = 1
            time_waiting_loading = 1
            flag_written = False
            break
        time.sleep(2)

        while app.windows()[0]._element_info.name == 'Entry Point Alert':
            app[app.windows()[0]._element_info.name].wait('exists').type_keys('{ENTER}')
            time.sleep(2)

        while any([app._element_info.name == 'Entry Point Alert' for app in app.windows()]):
            for index, apps in enumerate(app.windows()):
                if apps._element_info.name == 'Entry Point Alert':
                    target_index = index
                    app[app.windows()[target_index]._element_info.name].wait('exists').type_keys('{ENTER}')
            break

        dialog = app[app.windows()[0]._element_info.name]
        print(app.windows()[0]._element_info.name)

        while any([apps._element_info.name == 'Error' for apps in app.windows()]):
            error_indices = []
            for index, apps in enumerate(app.windows()):
                if apps._element_info.name == 'Error':
                    error_indices.append(index)
            try:
                app.windows()[error_indices[0]].type_keys('{ENTER}')
            except:
                app.windows()[error_indices[1]].type_keys('{ENTER}')

            print('pass')
            dialog = app[app.windows()[0]._element_info.name]
            dialog.wait('exists').type_keys('%{F2}')
            time_waiting_tracing = 1
            flag_written = False
            break

        trace_command(app, commandrun)
        time.sleep(5)

        while any([apps._element_info.name == 'Error' for apps in app.windows()]):
            error_indices = []
            for index, apps in enumerate(app.windows()):
                if apps._element_info.name == 'Error':
                    error_indices.append(index)
            try:
                app.windows()[error_indices[0]].type_keys('{ENTER}')
            except:
                app.windows()[error_indices[1]].type_keys('{ENTER}')

            print('pass')
            dialog = app[app.windows()[0]._element_info.name]
            dialog.wait('exists').type_keys('%{F2}')
            time_waiting_tracing = 1
            flag_written = False
            break

        while app.windows()[0]._element_info.name == 'Compressed code?':
            app.windows()[0].type_keys('{VK_TAB}')
            app.windows()[0].type_keys('{ENTER}')
            break

        while app.windows()[0]._element_info.name == 'Entry Point Alert':
            app.windows()[0].type_keys('{ENTER}')

        time.sleep(time_waiting_loading)
        trace_command(app, commandrun)
        time.sleep(10)
        trace_command(app, commandrun)
        time.sleep(time_waiting_tracing + 10)
        close_command(app)

        file2.write("%s" % rawpath)
        file2.close()

        if flag_written:
            file.write("%s" % rawpath)
            file.close()


def main_function_dll():
    filteredpathdll = 'D:\\bigproject_repository\\filteredonlydlllist32.txt'

    indexpathdll = 'D:\\bigproject_repository\\indexpathdll.npy'

    writtenpaths = 'D:\\bigproject_repository\\writtenpathlist.txt'
    wholewrittenpaths = 'D:\\bigproject_repository\\wholewrittenpathlist.txt'

    path = r'C:\\Program Files (x86)\\Immunity Inc\\Immunity Debugger\\ImmunityDebugger.exe'
    app = Application(backend="win32").connect(path=path)
    # app = Application(backend="win32").connect(title='Immunity Debugger - [CPU]')
    exe_central_directory = "D:\\exesource32_bit"
    exe_alternative = 'C:\\Users\\Ben\\Desktop\\bigproject_repository\\benign_exes'

    # starting_value = np.load(indexpathdll)[0]
    starting_value = 0
    generator = [line for line in open(filteredpathdll, 'r')]
    commandrun = 'TC'
    commandprefix = 'OPEN{VK_SPACE}'
    file_index = starting_value
    for line in generator[starting_value:]:
        file = open(writtenpaths, 'a')
        file2 = open(wholewrittenpaths, 'a')

        flag_written = True

        time_waiting_tracing = 60
        time_waiting_loading = 10
        time_waiting_process_loading = 5

        rawpath = line

        np.save(indexpathdll, np.array([file_index]))
        print('Processing_file_number = ' + str(file_index))
        file_index = file_index + 1

        command = commandprefix + rawpath[0:-1]
        dialog = app['Immunity Debugger']

        dialog.wait('exists').type_keys('%{F1}')
        dialog.wait('exists').type_keys(command)
        dialog.wait('exists').type_keys('%{F1}')
        dialog.wait('exists').type_keys('{ENTER}')

        time.sleep(time_waiting_process_loading)

        while app.windows()[0]._element_info.name == 'Entry Point Alert':
            app[app.windows()[0]._element_info.name].wait('exists').type_keys('{ENTER}')
            break

        while app.windows()[0]._element_info.name == 'Not a valid PE file':
            print('pass')
            app[app.windows()[0]._element_info.name].wait('exists').type_keys('{ENTER}')
            # dialog = app['Immunity Debugger']
            # dialog.wait('enabled').type_keys('%{F2}')
            time_waiting_tracing = 1
            time_waiting_loading = 1
            flag_written = False
            break

        while app.windows()[0]._element_info.name == 'Compressed code?':
            app[app.windows()[0]._element_info.name].wait('exists').type_keys('{VK_TAB}')
            app[app.windows()[0]._element_info.name].wait('exists').type_keys('{ENTER}')
            # dialog = app['Immunity Debugger']
            # dialog.wait('enabled').type_keys('%{F2}')
            break

        while any([app._element_info.name == 'Error' for app in app.windows()]):
            for index, apps in enumerate(app.windows()):
                if apps._element_info.name == 'Error':
                    target_index = index
                    app[app.windows()[target_index]._element_info.name].wait('exists').type_keys('{ENTER}')
            print('pass')
            dialog = app['Immunity Debugger']
            dialog.wait('exists').type_keys('%{F2}')
            time_waiting_tracing = 1
            time_waiting_loading = 1
            flag_written = False
            break

        dialog = app['Immunity Debugger -']
        time.sleep(2)

        while app.windows()[0]._element_info.name == 'Entry Point Alert':
            app[app.windows()[0]._element_info.name].wait('exists').type_keys('{ENTER}')
            break

        while any([app._element_info.name == 'Entry Point Alert' for app in app.windows()]):
            for index, apps in enumerate(app.windows()):
                if apps._element_info.name == 'Entry Point Alert':
                    target_index = index
                    app[app.windows()[target_index]._element_info.name].wait('exists').type_keys('{ENTER}')
            break

        # try:
        # except pywinauto.timings.TimeoutError:
        try:
            dialog.wait('exists').type_keys('%{F1}')
        except:
            error_handle(app)
            dialog.wait('exists').type_keys('%{F1}')

        dialog.wait('exists').type_keys(commandrun)
        dialog.wait('exists').type_keys('%{F1}')
        dialog.wait('exists').type_keys('{ENTER}')
        time.sleep(time_waiting_loading)

        while any([apps._element_info.name == 'Error' for apps in app.windows()]):
            error_indices = []
            for index, apps in enumerate(app.windows()):
                if apps._element_info.name == 'Error':
                    error_indices.append(index)
            try:
                app.windows()[error_indices[0]].type_keys('{ENTER}')
            except:
                app.windows()[error_indices[1]].type_keys('{ENTER}')

            print('pass')
            dialog = app['Immunity Debugger -']
            dialog.wait('exists').type_keys('%{F2}')
            time_waiting_tracing = 1
            flag_written = False
            break

        while app.windows()[0]._element_info.name == 'Compressed code?':
            app.windows()[0].type_keys('{VK_TAB}')
            app.windows()[0].type_keys('{ENTER}')
            # dialog = app['Immunity Debugger']
            # dialog.wait('enabled').type_keys('%{F2}')
            break

        while app.windows()[0]._element_info.name == 'Entry Point Alert':
            app.windows()[0].type_keys('{ENTER}')
            break

        time.sleep(2)
        try:
            dialog.wait('exists').type_keys('%{F1}')
        except:
            error_handle(app)

        dialog = app['Immunity Debugger -']
        dialog.wait('exists').type_keys('%{F1}')
        dialog.wait('exists').type_keys(commandrun)
        dialog.wait('exists').type_keys('%{F1}')
        dialog.wait('exists').type_keys('{ENTER}')
        time.sleep(time_waiting_tracing)
        try:
            dialog.wait('exists').type_keys('%{F2}')
        except:
            error_handle(app)
        try:
            dialog.wait('exists').type_keys('%{F2}')
        except:
            error_handle(app)
            dialog.wait('exists').type_keys('%{F2}')

        file2.write("%s" % rawpath)
        file2.close()

        if flag_written:
            file.write("%s" % rawpath)
            file.close()


if __name__ == "__main__":
    main_function_exe_v2()
