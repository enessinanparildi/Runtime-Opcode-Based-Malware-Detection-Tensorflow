import os
import shutil as sh
import pandas as pd

with open('E:\\dirstochange.txt', 'r') as file:
    list32 = [line.replace('{' , '').replace('}','') for line in file ]
with open('E:\\dirstochange.txt', 'w') as file:
    for line in list32:
        file.write(line)


def fetch_32_bit_from_sigcheck_result_csv():
    csvdir = "E:\\fulllistexetype2.csv"
    text_file_all_exes = "E:\\filesallexe.txt"
    csvdir = "E:\\fulllistexetype2.csv"
    text_file_all_exes = "E:\\filesall2.txt"

    dframe = pd.read_csv(csvdir,encoding = "ISO-8859-1",error_bad_lines=False)
    typelist = list(dframe['Machine Type'])
    typelist2 = [element for element in typelist if element is not typelist[3]]
    text_dir = 'E:\\final_exe_text_lists\\dirs_first_exe_32_bit_v2.txt'

    with open(text_file_all_exes  , 'r') as file:
        list32 = [line for inds,line in enumerate(file) if typelist2[inds] == '32-bit']

    with open(text_dir , 'w') as file:
        for line in list32:
            file.write(line)


def createbatch_for_sigcheck():
    prefix = "./sigcheck64.exe -ct -nobanner "
    suffix = " | out-file -FilePath \"fulllistexetype2.csv\" -append"

    text_file_for_sigcheck = "E:\\sigcheck.txt"
    text_file_all_exes = "E:\\filesall.txt"
    text_file_all_ps1 = "E:\\filesallbat.txt"
    text_file_for_sigcheck_ps1 = "E:\\sigcheckbatbat.txt"
    text_file_for_dll = "E:\\filesalldll.txt"
    text_file_all_exes2 = "E:\\filesall2.txt"
    text_file_for_sigcheck_exes2 = "E:\\filesallsigcheck2.txt"

    with open(text_file_all_exes2, 'r') as file:
        lines = [prefix + "\"" + line[:-4] + 'exe' + "\"" + suffix for line in file]
    with open(text_file_for_sigcheck_exes2, 'w') as file:
        for line in lines:
            file.write(line + '\n')

def createbatch_for_make_exe_directory():
    prefix = ".\make-exe.exe -file "
    suffix = " -silent"

    batch_file_directory_for_dll = "E:\\filesalldll.txt"
    batch_file_directory_for_dll_make = "E:\\filesalldllmake.txt"

    batch_file_directory_for_ps1 = "E:\\filesallps1.txt"
    batch_file_directory_for_ps1_make = "E:\\filesallps1make.txt"
    batch_file_directory_for_bat = "E:\\filesallbat.txt"
    batch_file_directory_for_bat_make = "E:\\filesallbatmake.txt"

    with open(batch_file_directory_for_dll, 'r') as file:
        lines = [prefix + "\"" + line[:-1] + "\"" + suffix for line in file]
    with open(batch_file_directory_for_dll_make, 'w') as file:
        for line in lines:
            file.write(line + '\n')


def createbatch_directory():
    exe_central_directory = "D:\\exesourceset"
    prefix = ".\Exe64bitDetector.exe -f "
    batch_file_directory = "C:\\Users\\Ben\\Desktop\\bigproject_repository\\whole_batch_run2.txt"
    cnt = 0
    with open(batch_file_directory, 'w') as file:
        for token in os.scandir(exe_central_directory):
            cnt = cnt + 1
            str_to_write = prefix + str(token.path)
            file.write(str_to_write + '\n')


def read_batch_results():
    results_directory = 'C:\\Users\\Ben\\Desktop\\bigproject_repository\\Exe64bitDetector\\new.txt'
    truth_list = []
    file_list = []
    with open(results_directory, 'r') as file:
        for cnt, line in enumerate(file):
            rawline = line.replace(" ", "")
            rawline = rawline.replace("\t", "")
            if rawline[0:8] == 'FilePath':
                file_list.append(rawline[9:len(rawline)])
            if rawline[0:3] == '|*|':
                truth_list.append(False)
                if rawline[9:11] == '32':
                    print('32_bit_found')
                    truth_list[-1] = True

    files_32_bit = [file for flag, file in zip(truth_list, file_list) if flag]
    return files_32_bit


def carry_32_bit_files(file_list_32_bit):
    destination_folder = 'D:\\exesource32_bit'
    exe_central_directory = "D:\\exesourceset"
    for files in file_list_32_bit:
        sh.move(files[0:-1], destination_folder)


def main():
    files_32_bit = read_batch_results()
    carry_32_bit_files(files_32_bit)


if __name__ == "__main__":
    main()
