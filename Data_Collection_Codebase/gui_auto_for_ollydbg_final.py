import pywinauto
from pywinauto.application import Application
import pywinauto.timings
import time
import numpy as np
import os
import pywinauto.base_wrapper


def command_batch(dialog, cmd):
    dialog.wait('enabled').type_keys('%{F1}')
    dialog.wait('enabled').type_keys(cmd)
    dialog.wait('enabled').type_keys('%{F1}')
    dialog.wait('enabled').type_keys('{ENTER}')


def error_handle(app):
    while app.windows()[0]._element_info.name == 'Entry Point Alert':
        app[app.windows()[0]._element_info.name].wait('exists').type_keys('{ENTER}')
        break

    while app.windows()[0]._element_info.name == 'Not a valid PE file':
        print('pass')
        app[app.windows()[0]._element_info.name].wait('exists').type_keys('{ENTER}')
        # dialog = app['Immunity Debugger']
        # dialog.wait('enabled').type_keys('%{F2}')
        time_waiting_tracing = 1
        time_waiting_loading = 1
        flag_written = False
        break

    while app.windows()[0]._element_info.name == 'Compressed code?':
        app[app.windows()[0]._element_info.name].wait('exists').type_keys('{VK_TAB}')
        app[app.windows()[0]._element_info.name].wait('exists').type_keys('{ENTER}')
        # dialog = app['Immunity Debugger']
        # dialog.wait('enabled').type_keys('%{F2}')
        break

    while any([app._element_info.name == 'Error' for app in app.windows()]):
        for index, apps in enumerate(app.windows()):
            if apps._element_info.name == 'Error':
                target_index = index
                app.windows()[target_index].type_keys('{ENTER}')
        print('pass')
        dialog = app['Immunity Debugger']
        dialog.wait('exists').type_keys('%{F2}')
        time_waiting_tracing = 1
        time_waiting_loading = 1
        flag_written = False
        break
    while app.windows()[0]._element_info.name == 'Suspicious breakpoint':
        app[app.windows()[0]._element_info.name].wait('exists').type_keys('{VK_TAB}')
        app[app.windows()[0]._element_info.name].wait('exists').type_keys('{ENTER}')
        # dialog = app['Immunity Debugger']
        # dialog = app['Immunity Debugger']
        # dialog.wait('enabled').type_keys('%{F2}')

    while app.windows()[0]._element_info.name == 'Entry Point Alert':
        app[app.windows()[0]._element_info.name].wait('exists').type_keys('{ENTER}')
        break

    while any([app._element_info.name == 'Entry Point Alert' for app in app.windows()]):
        for index, apps in enumerate(app.windows()):
            if apps._element_info.name == 'Entry Point Alert':
                target_index = index
                app[app.windows()[target_index]._element_info.name].wait('exists').type_keys('{ENTER}')
        break

def trace_command(app, commandrun):
    dialog = app[app.windows()[0]._element_info.name]
    try:
        error_handle(app)
        dialog['Command Bar'].combobox.wait('exists').type_keys(commandrun)
        dialog['Command Bar'].combobox.wait('exists').type_keys('{ENTER}')
    except:
        dialog = app[app.windows()[0]._element_info.name]
        error_handle(app)
        dialog['OT_PLUGIN_0001'].edit.wait('exists').type_keys(commandrun)
        dialog['OT_PLUGIN_0001'].edit.wait('exists').type_keys('{ENTER}')

def close_command(app):
    dialog = app[app.windows()[0]._element_info.name]
    try:
        dialog.wait('exists').type_keys('%{F2}')
    except:
        error_handle(app)
        dialog.wait('exists').type_keys('%{F2}')


# def all_error_handle_block():

def recurse_file_search_from_exe_source_directory():
    exe_central_path =  'C:\\Users\\User\\new_samples'
    list_of_files = []
    for root, dirs, files in os.walk(exe_central_path):
        for name in files:
            list_of_files.append(os.path.join(root, name))
    filtered_list = list(filter(lambda x: x[-3:] == 'exe', list_of_files))
    return filtered_list


def main_function_exe_v2():
    # Either read exe directory from a path or search them recursively using the function provided

    text_file_for_exe_source_path = 'E:\\final_exe_text_lists\\dirs_first_exe_32_bit.txt'

    # nummy data to save and load index counter.
    index_of_current_exe = 'D:\\bigproject_repository\\indexpath2.npy'

    text_for_succesfully_processed_exes = 'D:\\bigproject_repository\\writtenpathlist_fake.txt'
    text_for_all_exes= 'D:\\bigproject_repository\\wholewrittenpathlist_fake.txt'

    path_of_the_debugger = r'E:\\vm_files\\ollydbg_new\\OLLYDBG.EXE'

    app = Application(backend="win32").connect(path=path_of_the_debugger)
    #
    starting_value = np.load(index_of_current_exe)[0]
    generator = recurse_file_search_from_exe_source_directory()
    print(len(generator))
    commandrun = 'TC'
    commandprefix = 'OPEN{VK_SPACE}'
    file_index = starting_value
    for line in generator[starting_value:]:
        file = open(text_for_succesfully_processed_exes, 'a')
        file2 = open(text_for_all_exes, 'a')

        flag_written = True

        time_waiting_tracing = 5
        time_waiting_loading = 10
        time_waiting_process_loading = 5

        rawpath = line

        np.save(index_of_current_exe, np.array([file_index]))
        print('Processing_file_number = ' + str(file_index))
        file_index = file_index + 1

        command = commandprefix + rawpath[0:]
        dialog = app[app.windows()[0]._element_info.name]
        print(command)
        print(app.windows()[0]._element_info.name)

        dialog['Command Bar'].combobox.wait('exists').type_keys(command, with_spaces=True)
        dialog['Command Bar'].combobox.wait('exists').type_keys('{ENTER}')

        time.sleep(time_waiting_process_loading)

        while app.windows()[0]._element_info.name == 'Entry Point Alert':
            app[app.windows()[0]._element_info.name].wait('exists').type_keys('{ENTER}')
            break

        while app.windows()[0]._element_info.name == 'Not a valid PE file':
            print('pass')
            app[app.windows()[0]._element_info.name].wait('exists').type_keys('{ENTER}')
            time_waiting_tracing = 1
            time_waiting_loading = 1
            flag_written = False
            break
        time.sleep(5)
        while app.windows()[0]._element_info.name == 'Request to load DLL':
            app[app.windows()[0]._element_info.name].wait('exists').type_keys('{ENTER}')
            break

        time.sleep(3)
        while app.windows()[0]._element_info.name == 'Unable to load DLL':
            app[app.windows()[0]._element_info.name].wait('exists').type_keys('{ENTER}')
            break

        while any([app._element_info.name == 'Error' for app in app.windows()]):
            app[app.windows()[0]._element_info.name].wait('exists').type_keys('{ENTER}')
            break


        while app.windows()[0]._element_info.name == 'Compressed code?':
            app[app.windows()[0]._element_info.name].wait('exists').type_keys('{VK_TAB}')
            app[app.windows()[0]._element_info.name].wait('exists').type_keys('{ENTER}')
            break


        while any([app._element_info.name == 'Error' for app in app.windows()]):
            for index, apps in enumerate(app.windows()):
                if apps._element_info.name == 'Error':
                    target_index = index
                    app[app.windows()[target_index]._element_info.name].wait('exists').type_keys('{ENTER}')
            print('pass')
            dialog = app[app.windows()[0]._element_info.name]
            dialog.wait('exists').type_keys('%{F2}')
            time_waiting_tracing = 1
            time_waiting_loading = 1
            flag_written = False
            break
        time.sleep(2)

        while app.windows()[0]._element_info.name == 'Entry Point Alert':
            app[app.windows()[0]._element_info.name].wait('exists').type_keys('{ENTER}')
            time.sleep(2)

        while any([app._element_info.name == 'Entry Point Alert' for app in app.windows()]):
            for index, apps in enumerate(app.windows()):
                if apps._element_info.name == 'Entry Point Alert':
                    target_index = index
                    app[app.windows()[target_index]._element_info.name].wait('exists').type_keys('{ENTER}')
            break

        dialog = app[app.windows()[0]._element_info.name]
        print(app.windows()[0]._element_info.name)

        while any([apps._element_info.name == 'Error' for apps in app.windows()]):
            error_indices = []
            for index, apps in enumerate(app.windows()):
                if apps._element_info.name == 'Error':
                    error_indices.append(index)
            try:
                app.windows()[error_indices[0]].type_keys('{ENTER}')
            except:
                app.windows()[error_indices[1]].type_keys('{ENTER}')

            print('pass')
            dialog = app[app.windows()[0]._element_info.name]
            time_waiting_tracing = 1
            flag_written = False
            break

        trace_command(app, commandrun)
        time.sleep(5)

        while any([apps._element_info.name == 'Error' for apps in app.windows()]):
            error_indices = []
            for index, apps in enumerate(app.windows()):
                if apps._element_info.name == 'Error':
                    error_indices.append(index)
            try:
                app.windows()[error_indices[0]].type_keys('{ENTER}')
            except:
                app.windows()[error_indices[1]].type_keys('{ENTER}')

            print('pass')
            dialog = app[app.windows()[0]._element_info.name]
            dialog.wait('exists').type_keys('%{F2}')
            time_waiting_tracing = 1
            flag_written = False
            break

        while app.windows()[0]._element_info.name == 'Compressed code?':
            app.windows()[0].type_keys('{VK_TAB}')
            app.windows()[0].type_keys('{ENTER}')
            break

        while app.windows()[0]._element_info.name == 'Entry Point Alert':
            app.windows()[0].type_keys('{ENTER}')

        time.sleep(time_waiting_loading)
        trace_command(app, commandrun)
        time.sleep(time_waiting_tracing)
        close_command(app)

        file2.write("%s" % rawpath + "\n")
        file2.close()

        if flag_written:
            file.write("%s" % rawpath + "\n")
            file.close()

if __name__ == "__main__":
    main_function_exe_v2()
