import pywinauto
from pywinauto.application import Application
from multiprocessing import Pool
import pywinauto.timings
import time
import numpy as np
import os
import pywinauto.base_wrapper
import sys

def command_batch(dialog, cmd):
    dialog.wait('enabled').type_keys('%{F1}')
    dialog.wait('enabled').type_keys(cmd)
    dialog.wait('enabled').type_keys('%{F1}')
    dialog.wait('enabled').type_keys('{ENTER}')


def error_handle(app):
    while app.windows()[0]._element_info.name == 'Entry Point Alert':
        app[app.windows()[0]._element_info.name].wait('exists').type_keys('{ENTER}')
        break

    while app.windows()[0]._element_info.name == 'Not a valid PE file':
        print('pass')
        app[app.windows()[0]._element_info.name].wait('exists').type_keys('{ENTER}')
        # dialog = app['Immunity Debugger']
        # dialog.wait('enabled').type_keys('%{F2}')
        time_waiting_tracing = 1
        time_waiting_loading = 1
        flag_written = False
        break

    while app.windows()[0]._element_info.name == 'Compressed code?':
        app[app.windows()[0]._element_info.name].wait('exists').type_keys('{VK_TAB}')
        app[app.windows()[0]._element_info.name].wait('exists').type_keys('{ENTER}')
        # dialog = app['Immunity Debugger']
        # dialog.wait('enabled').type_keys('%{F2}')
        break

    while any([app._element_info.name == 'Error' for app in app.windows()]):
        for index, apps in enumerate(app.windows()):
            if apps._element_info.name == 'Error':
                target_index = index
                app.windows()[target_index].type_keys('{ENTER}')
        print('pass')
        dialog = app['Immunity Debugger']
        dialog.wait('exists').type_keys('%{F2}')
        time_waiting_tracing = 1
        time_waiting_loading = 1
        flag_written = False
        break
    while app.windows()[0]._element_info.name == 'Suspicious breakpoint':
        app[app.windows()[0]._element_info.name].wait('exists').type_keys('{VK_TAB}')
        app[app.windows()[0]._element_info.name].wait('exists').type_keys('{ENTER}')
        # dialog = app['Immunity Debugger']
        # dialog = app['Immunity Debugger']
        # dialog.wait('enabled').type_keys('%{F2}')

    while app.windows()[0]._element_info.name == 'Entry Point Alert':
        app[app.windows()[0]._element_info.name].wait('exists').type_keys('{ENTER}')
        break

    while any([app._element_info.name == 'Entry Point Alert' for app in app.windows()]):
        for index, apps in enumerate(app.windows()):
            if apps._element_info.name == 'Entry Point Alert':
                target_index = index
                app[app.windows()[target_index]._element_info.name].wait('exists').type_keys('{ENTER}')
        break


def main_op(line, app):
    commandrun = 'TC'
    commandprefix = 'OPEN{VK_SPACE}'

    writtenpaths = 'D:\\bigproject_repository\\writtenpathlist.txt'
    wholewrittenpaths = 'D:\\bigproject_repository\\wholewrittenpathlist.txt'

    file = open(writtenpaths, 'a')
    file2 = open(wholewrittenpaths, 'a')

    flag_written = True

    time_waiting_tracing = 70
    time_waiting_loading = 45
    time_waiting_process_loading = 5

    rawpath = line

    command = commandprefix + rawpath[0:-1]
    dialog = app['Immunity Debugger']
    dialog.minimize()
    print(command)
    print(app.windows()[0]._element_info.name)

    dialog['Embedded Command Line'].edit.wait('exists').type_keys(command, with_spaces=True)
    dialog['Embedded Command Line'].edit.wait('exists').type_keys('{ENTER}')

    time.sleep(time_waiting_process_loading)

    while app.windows()[0]._element_info.name == 'Entry Point Alert':
        app[app.windows()[0]._element_info.name].wait('exists').type_keys('{ENTER}')
        break

    while app.windows()[0]._element_info.name == 'Not a valid PE file':
        print('pass')
        app[app.windows()[0]._element_info.name].wait('exists').type_keys('{ENTER}')
        time_waiting_tracing = 1
        time_waiting_loading = 1
        flag_written = False
        break

    while app.windows()[0]._element_info.name == 'Compressed code?':
        app[app.windows()[0]._element_info.name].wait('exists').type_keys('{VK_TAB}')
        app[app.windows()[0]._element_info.name].wait('exists').type_keys('{ENTER}')
        break

    while any([app._element_info.name == 'Error' for app in app.windows()]):
        for index, apps in enumerate(app.windows()):
            if apps._element_info.name == 'Error':
                target_index = index
                app[app.windows()[target_index]._element_info.name].wait('exists').type_keys('{ENTER}')
        print('pass')
        dialog = app['Immunity Debugger']
        dialog.minimize()
        dialog.wait('exists').type_keys('%{F2}')
        time_waiting_tracing = 1
        time_waiting_loading = 1
        flag_written = False
        break
    time.sleep(2)

    while app.windows()[0]._element_info.name == 'Entry Point Alert':
        app[app.windows()[0]._element_info.name].wait('exists').type_keys('{ENTER}')
        time.sleep(2)

    while any([app._element_info.name == 'Entry Point Alert' for app in app.windows()]):
        for index, apps in enumerate(app.windows()):
            if apps._element_info.name == 'Entry Point Alert':
                target_index = index
                app[app.windows()[target_index]._element_info.name].wait('exists').type_keys('{ENTER}')
        break

    dialog = app[app.windows()[0]._element_info.name]
    dialog.minimize()
    print(app.windows()[0]._element_info.name)
    try:
        error_handle(app)

        dialog['Embedded Command Line'].edit.wait('exists').type_keys(commandrun)
        dialog['Embedded Command Line'].edit.wait('exists').type_keys('{ENTER}')
    except:
        dialog = app[app.windows()[0]._element_info.name]
        dialog.minimize()
        dialog['OT_PLUGIN_0001'].edit.wait('exists').type_keys(commandrun)
        dialog['OT_PLUGIN_0001'].edit.wait('exists').type_keys('{ENTER}')

    time.sleep(5)

    while any([apps._element_info.name == 'Error' for apps in app.windows()]):
        error_indices = []
        for index, apps in enumerate(app.windows()):
            if apps._element_info.name == 'Error':
                error_indices.append(index)
        try:
            app.windows()[error_indices[0]].type_keys('{ENTER}')
        except:
            app.windows()[error_indices[1]].type_keys('{ENTER}')

        print('pass')
        dialog = app[app.windows()[0]._element_info.name]
        dialog.minimize()
        dialog.wait('exists').type_keys('%{F2}')
        time_waiting_tracing = 1
        flag_written = False
        break

    while app.windows()[0]._element_info.name == 'Compressed code?':
        app.windows()[0].type_keys('{VK_TAB}')
        app.windows()[0].type_keys('{ENTER}')
        break

    while app.windows()[0]._element_info.name == 'Entry Point Alert':
        app.windows()[0].type_keys('{ENTER}')

    time.sleep(time_waiting_loading)

    dialog = app[app.windows()[0]._element_info.name]
    dialog.minimize()
    try:
        error_handle(app)
        dialog['Embedded Command Line'].edit.wait('exists').type_keys(commandrun)
        dialog['Embedded Command Line'].edit.wait('exists').type_keys('{ENTER}')
    except:
        dialog = app[app.windows()[0]._element_info.name]
        error_handle(app)
        dialog['OT_PLUGIN_0001'].edit.wait('exists').type_keys(commandrun)
        dialog['OT_PLUGIN_0001'].edit.wait('exists').type_keys('{ENTER}')

    dialog = app[app.windows()[0]._element_info.name]
    dialog.minimize()
    time.sleep(time_waiting_tracing)
    try:
        dialog.wait('exists').type_keys('%{F2}')
    except:
        error_handle(app)
        dialog.wait('exists').type_keys('%{F2}')

    file2.write("%s" % rawpath)
    file2.close()

    if flag_written:
        file.write("%s" % rawpath)
        file.close()


def main_function_exe_parellel(process_id, offset):
    filteredpath = 'E:\\final_exe_lists\\dirs_first_exe_32_bit.txt'

    global_step_path = 'D:\\bigproject_repository\\globalpath' + str(offset) + '.npy'

    app = Application(backend="win32").connect(process=process_id)
    global_step = np.load(global_step_path)[0]
    global_step = 4
    generator = [line for line in open(filteredpath, 'r')]
    starting_value = 1927

    while True:
        try:
            full_offset = 2 * global_step + offset
            line = generator[starting_value + full_offset]
            print('Processing_file_number = ' + str(starting_value + full_offset))
            main_op(line, app)
            global_step = global_step + 1
            np.save(global_step_path, np.array([global_step]))
        except:
            break

def global_operation(id):
    idlist = [31572, 16792, 26972]
    num_select = id
    if num_select == 0:
        main_function_exe_parellel(process_id=idlist[0], offset=0)
    elif num_select == 1:
        main_function_exe_parellel(process_id=idlist[1], offset=1)
    elif num_select == 2:
        main_function_exe_parellel(process_id=idlist[2], offset=2)


if __name__ == "__main__":
    idlist = [31572, 16792, 26972]
    num_select = sys.argv[0]
    if num_select == 0:
        main_function_exe_parellel(process_id=idlist[0], offset=0)
    elif num_select == 1:
        main_function_exe_parellel(process_id=idlist[1], offset=1)
    elif num_select == 2:
        main_function_exe_parellel(process_id=idlist[2], offset=2)
