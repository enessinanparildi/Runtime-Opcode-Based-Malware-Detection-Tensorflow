import numpy as np
from cnn_model_class_def import CnnModelClass


class CnnRunFunctions(CnnModelClass):

    def __init__(self):
        super().__init__()

    # Run all kinds off inference algoritms on the top of pre-trained network features
    def run_whole_inference(self):
        # Assigns dataset for the particular operation  self.yield_dataset() definition is in graph_training_function.py
        # You may modify function to load different dataset . but in general raw dataset must go under several operation . you can see these operations in
        # data_load_functions.load_data_v3_all_mixed_final_version() , raw dataset here means token sequences.
        self.yield_dataset()
        graph = self.get_cnn_graph()
        # Forward pass for training dataset without any weight update(training)
        predict_set, feature_set, score_set, opt_thres = self.run_train_forward_pass(graph=graph)
        test_predict_set, test_feature_set, test_score_set = self.run_test_inference(graph=graph)
        self.run_ml_classification(feature_set, test_feature_set, test_score_set, opt_thres)

    # Train network for specified number of epochs
    def run_train(self):
        self.yield_dataset()
        graph = self.get_cnn_graph()
        self.train_graph(graph=graph)

    # Evaluate network for validation data after after every epoch of training 
    def run_train_with_inference(self):
        self.yield_dataset()
        graph = self.get_cnn_graph()
        self.train_test_graph_run(graph=graph)

    # Calculate network features for train_data by changing self.converted_train_data, you may calculate it for arbitrary dataset. 
    def run_forward_pass(self):
        self.yield_dataset()
        graph = self.get_cnn_graph()
        predict_set, feature_set, score_set, opt_thres = self.run_train_forward_pass(graph=graph)

    # Run adversarial_train with the pre-prapared advarasrial examples
    def run_adversarial_train(self):
        self.converted_train_data = np.load('D:\\thesis_code_base\\saveddata\\Networks\\convolutional_networks'
                                            '\\cnn_advarsarial_examples_noise_level= 0.01.npy')
        print('data_loaded')
        data_len_ad = len(self.converted_train_data)
        self.train_label = np.zeros(data_len_ad)
        self.converted_test_data = None
        self.test_label = None
        graph = self.get_cnn_graph_for_adversarial()
        graph.finalize()
        print('graph_created')
        self.train_graph(graph=graph)

    # Craft advasarial samples , save them on disk and if do_inference = True use them as test set.
    def craft_adversarial_inference(self, number_of_samples=4000, noise_level=0.01, do_inference=True):
        self.yield_dataset()
        self.converted_train_data = self.converted_train_data[np.where(self.train_label == 0)[0][:number_of_samples], :]
        self.train_label = self.train_label[np.where(self.train_label == 0)[0][:number_of_samples]]
        graph = self.get_cnn_graph()
        advarsarial_samples = self.fgsm_adversarial_samples(graph=graph, noise_level=noise_level)
        print(advarsarial_samples.shape)
        if do_inference:
            self.converted_train_data = advarsarial_samples
            graph = self.load_graph_with_custom_dataset_for_adversarial(advarsarial_samples, self.train_label,
                                                                        mode="test")
            test_predict_set, test_feature_set, test_score_set = self.run_test_inference(graph=graph)

    def load_graph_with_custom_dataset_for_adversarial(self, data, label, mode="train"):
        if mode == "train":
            self.converted_train_data = data
            self.train_label = label
        else:
            self.converted_test_data = data
            self.test_label = label
        graph = self.get_cnn_graph_for_adversarial()
        return graph


if __name__ == "__main__":
    # os.environ['TF_CPP_MIN_LOG_LEVEL'] = '3'
    np.set_printoptions(precision=30)
    functions = CnnRunFunctions()
    functions.run_train()
