import tensorflow as tf
from tensorflow import keras


def yield_dataset(self):
    self.converted_train_data, self.train_label, self.converted_test_data, self.test_label, self.embedding_mat, diction, class_weight = \
        data_load_functions.load_data_v3_all_mixed(load_larger_test=True)
    self.feature_size = self.embedding_mat.shape[1]
    self.total_data_length = self.converted_train_data.shape[0]
    self.total_test_length = self.converted_test_data.shape[0]




def tensorflow_min_max_normalize(self, tensor, epsilon=1e-8):
    tensor = tf.to_float(tensor)
    max_val = tf.reduce_max(tensor)
    min_val = tf.reduce_min(tensor)
    numerator = tf.subtract(tf.add(tensor, epsilon), min_val)
    denom_val = tf.subtract(max_val, min_val)
    denominator = tf.cond(denom_val < 2 * epsilon, lambda: 2 * epsilon, lambda: denom_val)
    return tf.div(numerator, denominator)


def get_input_data_pipeline(self, graph):
    with graph.as_default():
        dataset_train = tf.data.Dataset.from_tensor_slices(
            self.converted_train_data)

        dataset_test = tf.data.Dataset.from_tensor_slices(
            self.converted_test_data)

        dataset_all = dataset_train.concatenate(dataset_test)
        dataset_all = dataset_all.shuffle(len(self.converted_train_data) + len(self.converted_test_data),
                                          reshuffle_each_iteration=True)
        batch_op_train = dataset_all.batch(self.batch_size)
        batch_op_train = batch_op_train.prefetch(1)

        iterator_train = tf.data.Iterator.from_structure(batch_op_train.output_types,
                                                         batch_op_train.output_shapes)
        dataset_init_op_train = iterator_train.make_initializer(batch_op_train, name='train_init')

        data_piece = iterator_train.get_next()

    return data_piece

def autoencoder(input_img):
    x = keras.layers.Conv2D(16, (3, 3), activation='relu', padding='same')(input_img)
    x = keras.layers.MaxPooling2D((2, 2), padding='same')(x)
    x = keras.layers.Conv2D(8, (3, 3), activation='relu', padding='same')(x)
    x = keras.layers.MaxPooling2D((2, 2), padding='same')(x)
    x = keras.layers.Conv2D(8, (3, 3), activation='relu', padding='same')(x)
    encoded = keras.layers.MaxPooling2D((2, 2), padding='same')(x)

    # at this point the representation is (4, 4, 8) i.e. 128-dimensional

    x = keras.layers.Conv2D(8, (3, 3), activation='relu', padding='same')(encoded)
    x = keras.layers.UpSampling2D((2, 2))(x)
    x = keras.layers.Conv2D(8, (3, 3), activation='relu', padding='same')(x)
    x = keras.layers.UpSampling2D((2, 2))(x)
    x = keras.layers.Conv2D(16, (3, 3), activation='relu')(x)
    x = keras.layers.UpSampling2D((2, 2))(x)
    decoded = keras.layers.Conv2D(1, (3, 3), activation='sigmoid', padding='same')(x)
    return  decoded


def main():
    decoded = autoencoder(input_img)
    autoencoder = keras.models.Model(input_img, decoded)
    autoencoder.compile(optimizer='adadelta', loss='binary_crossentropy')