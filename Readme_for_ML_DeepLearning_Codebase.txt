- CNN is the easiest , fastest and the best overall to work with.
- cnn_model_class_def_py contains graph definitions and parameters
- cnnmodeldefinitions contain lower level mathmatical definitions of cnn model types
- Then finally higher_level_cnn_execution_functions provides train , evaluate directives for cnn model class. These are the highest level function the you need to run.
- graph_training_functions contains common methods for all other model types yield_dataset function load particular train and test set to the model.
- RNNmodelBidirectional_alternative.py runs LSTM_rnn training
- transformer_model.py runs transformer training , transformer underperforms compared to lstm and CNN but I had to use very small model size due to small gpu memory. You may want to try again with larger transformer 
- data_load_functions contain several function to faciliate fast train-test data loading to models. I used several functions here for various experiments , but load_data_v3_all_mixed function 
gives dataset for final experiment with all data except the newest malwares.This function loads a numpy dataset from saveddata\Fixed_numpy_dataset to deploy data faster. For cnn model class, setting self.converted_train_data ,self.train_label ,self.converted_test_data ,self.test_label properties loads the data. 
- Self.embedding_mat and self.dictionary loads embedding_mat and dictionary. We do not need to worry about these two. We can just use the ones which are provided by me in the saveddata\Embedding_matrix
- ml-algoritms.py contains functions to call other ml algortmitms.
- Saveddata contains pre-trained model data weights ,graphs in tensorflow file format , opcode(word) embedding matrix and preprocessed dataset in a form of numpy npy files. 
- saveddata\Networks\Results evaluation results in txt file , each model has its own txt file.
- I also implemented various functions for advarsarial training on cnn model class. I was not able to go thougth it completedly due to insufficient memory in my computer. If you want , you can run the  adversarial training on a pre-trained cnn model and see if that brings improvement on the test set. It should not take too much time to do so. To run advarsarial training , choose a pretrained model first run craft_adversarial_inference function . This will create number of advarsarial samples and save them on the model root directory. After that , by using run advarsarial train function , you may start advarasiral training.  
- opcode_embeddings.py contains lower level opcode centric operations.
- helper_function.py contains functions which faciliate  logging , plotting , model saving , performance metric calculation
- I have included one pre-trained cnn model 'cnn_model_v19_fit_entire_set'. This model was fitted completely using entire dataset including new malware. It is also very easy in general to train cnn model form stracth
  